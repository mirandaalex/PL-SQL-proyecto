SET SERVEROUTPUT ON
--********************************TRIGGERS**********************************
--TRIGGER PARA CAMBIAR EL ESTATUS AL INSERTAR EN PRESTAMO CUANDO SE AGREGA UN PRESTAMO
CREATE OR REPLACE TRIGGER TR_ESTATUS_PRESTAMO
BEFORE INSERT OR DELETE ON PRESTAMO
FOR EACH ROW
DECLARE
VESTATUS VARCHAR2(20);
BEGIN  
    IF INSERTING THEN
        SELECT ESTATUS
        INTO VESTATUS
        FROM EJEMPLAR
        WHERE IDMATERIAL=:NEW.IDMATERIAL AND NOEJEMPLAR=:NEW.NOEJEMPLAR;
        IF (VESTATUS='DISPONIBLE') THEN
            UPDATE EJEMPLAR SET ESTATUS='PRESTAMO' 
            WHERE IDMATERIAL=:NEW.IDMATERIAL 
            AND NOEJEMPLAR=:NEW.NOEJEMPLAR;
        ELSE
            IF (VESTATUS='NO SALE' OR VESTATUS='MANTENIMIENTO') THEN
                RAISE_APPLICATION_ERROR (-20600,' EL MATERIAL TIENE EL ESTATUS: '||VESTATUS||' Y NO ESTA AUTORIZADO PARA SU PRESTAMO');
            END IF;
        END IF;
    END IF;
    IF DELETING THEN
        SELECT ESTATUS
        INTO VESTATUS
        FROM EJEMPLAR
        WHERE IDMATERIAL=:OLD.IDMATERIAL AND NOEJEMPLAR=:OLD.NOEJEMPLAR;
        IF (VESTATUS='PRESTAMO') THEN
            UPDATE EJEMPLAR SET ESTATUS='DISPONIBLE' 
            WHERE IDMATERIAL=:OLD.IDMATERIAL 
            AND NOEJEMPLAR=:OLD.NOEJEMPLAR;
        END IF;
    END IF;
END;
/
--TRIGER QUE CALCULA UNA MULTA ANTES DE SOLICITAR UN REFRENDO
-- PUEDE QUE ESTE TRIGGER SOBRE NO EJECUTAR DE MOMENTO***************************************************************
/*
CREATE OR REPLACE TRIGGER TR_CALCULOADEUDOS
BEFORE UPDATE  ON PRESTAMO FOR EACH ROW
DECLARE
vDias NUMBER(2):=0;
vMonto NUMERIC(6):=0;
BEGIN    
    vDias:=ftDifDias(SYSDATE,:OLD.FECHAVENC);
    if vdias>0 THEN
        DBMS_OUTPUT.PUT_LINE('dias de atraso: '||vDias);
        vMonto:=vDias*2;
        :NEW.diasatraso:=vDias;
        :NEW.monto:=vmonto;
        :NEW.fechamulta:=sysdate;
    END IF;
END;
/
*/
--TRIGGER PARA IMPEDIR ELIMINAR UN PRESTAMO SI TIENE ADEUDOS
CREATE OR REPLACE TRIGGER TR_ADEUDOS
BEFORE DELETE ON PRESTAMO
FOR EACH ROW
BEGIN
	IF (:OLD.FECHAMULTA <> NULL) THEN
		RAISE_APPLICATION_ERROR (-20601,' EL LECTOR TIENE MULTA, NO SE ELIMINARA EL PRESTAMO HASTA LIQUIDAR');
    END IF;
END;
/
--TRIGUER PARA IMPEDIR ELIMINAR UN LECTOR SI TIENE PRESTAMOS
CREATE OR REPLACE TRIGGER TR_ELIMINA_LECTOR_ADEUDO
AFTER DELETE ON LECTOR
FOR EACH ROW
DECLARE
VIDLECTOR LECTOR.IDLECTOR%TYPE;
BEGIN
	SELECT IDLECTOR
	INTO VIDLECTOR
	FROM LECTOR
	WHERE :OLD.IDLECTOR=ANY(SELECT IDLECTOR
						FROM PRESTAMO);
	IF (VIDLECTOR <> NULL) THEN
		RAISE_APPLICATION_ERROR (-20602,'EL LECTOR TIENE PRESTAMOS A SU NOMBRE, NO SE PUEDE BORRAR');
    END IF;
END;
/
--TRIGGER PARA IMPEDIR ELIMINAR UN MATERIAL SI ALGUN EJEMPLAR SE ENCUENTRA PRESTADO
CREATE OR REPLACE TRIGGER TR_ELIMINA_MATERIAL
AFTER DELETE ON MATERIAL
FOR EACH ROW
DECLARE
VIDMATERIAL MATERIAL.IDMATERIAL%TYPE;
BEGIN
	SELECT IDMATERIAL
	INTO VIDMATERIAL
	FROM MATERIAL
	WHERE :OLD.IDMATERIAL=ANY(SELECT IDMATERIAL
							FROM EJEMPLAR
							WHERE ESTATUS='PRESTAMO');
	IF (VIDMATERIAL <> NULL) THEN
		RAISE_APPLICATION_ERROR (-20603,'EL MATERIAL TIENE AL MENOS UN EJEMPLAR EN PRESTAMO POR LO CUAL NO SE PUEDE ELIMINAR');
    END IF;
END;
/
--TRIGGER PARA IMPEDIR REALIZAR MAS PRESTAMOS SI EL LECTOR TIENE ADEUDOS
CREATE OR REPLACE TRIGGER TR_IMPIDE_PRESTAMO_LECTOR
AFTER INSERT ON PRESTAMO
FOR EACH ROW
DECLARE
VIDLECTOR LECTOR.IDLECTOR%TYPE;
BEGIN
	SELECT IDLECTOR
	INTO VIDLECTOR
	FROM LECTOR
	WHERE :NEW.IDLECTOR=ANY(SELECT IDLECTOR
							FROM PRESTAMO
							WHERE FECHAMULTA <> NULL);
	IF (VIDLECTOR <> NULL) THEN
		RAISE_APPLICATION_ERROR (-20603,'EL LECTOR TIENE AL MENOS UNA MULTA POR LO CUAL NO SE PUEDEN DAR MAS PRESTAMOS');
    END IF;
END;
/



DROP TRIGGER TR_ESTATUS_PRESTAMO;
DROP TRIGGER TR_ADEUDOS;
DROP TRIGGER TR_ELIMINA_LECTOR_ADEUDO;
DROP TRIGGER TR_ELIMINA_MATERIAL;
DROP TRIGGER TR_IMPIDE_PRESTAMO_LECTOR;
COMMIT;